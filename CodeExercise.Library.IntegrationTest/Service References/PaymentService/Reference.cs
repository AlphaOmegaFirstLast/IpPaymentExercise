//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeExercise.Library.IntegrationTest.PaymentService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PaymentService.IPaymentService")]
    public interface IPaymentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/WhatsYourId", ReplyAction="http://tempuri.org/IPaymentService/WhatsYourIdResponse")]
        string WhatsYourId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/WhatsYourId", ReplyAction="http://tempuri.org/IPaymentService/WhatsYourIdResponse")]
        System.Threading.Tasks.Task<string> WhatsYourIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/IsCardNumberValid", ReplyAction="http://tempuri.org/IPaymentService/IsCardNumberValidResponse")]
        bool IsCardNumberValid(string cardNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/IsCardNumberValid", ReplyAction="http://tempuri.org/IPaymentService/IsCardNumberValidResponse")]
        System.Threading.Tasks.Task<bool> IsCardNumberValidAsync(string cardNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/IsValidPaymentAmount", ReplyAction="http://tempuri.org/IPaymentService/IsValidPaymentAmountResponse")]
        bool IsValidPaymentAmount(long amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/IsValidPaymentAmount", ReplyAction="http://tempuri.org/IPaymentService/IsValidPaymentAmountResponse")]
        System.Threading.Tasks.Task<bool> IsValidPaymentAmountAsync(long amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/CanMakePaymentWithCard", ReplyAction="http://tempuri.org/IPaymentService/CanMakePaymentWithCardResponse")]
        bool CanMakePaymentWithCard(string cardNumber, int expiryMonth, int expiryYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/CanMakePaymentWithCard", ReplyAction="http://tempuri.org/IPaymentService/CanMakePaymentWithCardResponse")]
        System.Threading.Tasks.Task<bool> CanMakePaymentWithCardAsync(string cardNumber, int expiryMonth, int expiryYear);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPaymentServiceChannel : CodeExercise.Library.IntegrationTest.PaymentService.IPaymentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PaymentServiceClient : System.ServiceModel.ClientBase<CodeExercise.Library.IntegrationTest.PaymentService.IPaymentService>, CodeExercise.Library.IntegrationTest.PaymentService.IPaymentService {
        
        public PaymentServiceClient() {
        }
        
        public PaymentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PaymentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string WhatsYourId() {
            return base.Channel.WhatsYourId();
        }
        
        public System.Threading.Tasks.Task<string> WhatsYourIdAsync() {
            return base.Channel.WhatsYourIdAsync();
        }
        
        public bool IsCardNumberValid(string cardNumber) {
            return base.Channel.IsCardNumberValid(cardNumber);
        }
        
        public System.Threading.Tasks.Task<bool> IsCardNumberValidAsync(string cardNumber) {
            return base.Channel.IsCardNumberValidAsync(cardNumber);
        }
        
        public bool IsValidPaymentAmount(long amount) {
            return base.Channel.IsValidPaymentAmount(amount);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidPaymentAmountAsync(long amount) {
            return base.Channel.IsValidPaymentAmountAsync(amount);
        }
        
        public bool CanMakePaymentWithCard(string cardNumber, int expiryMonth, int expiryYear) {
            return base.Channel.CanMakePaymentWithCard(cardNumber, expiryMonth, expiryYear);
        }
        
        public System.Threading.Tasks.Task<bool> CanMakePaymentWithCardAsync(string cardNumber, int expiryMonth, int expiryYear) {
            return base.Channel.CanMakePaymentWithCardAsync(cardNumber, expiryMonth, expiryYear);
        }
    }
}
